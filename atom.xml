<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>Chris Paraiso</title>
    <description>A minimal hugo theme focus on content</description>
    <link>/</link>
    
    <language>en</language>
    <copyright>Copyright 2025, Calvin Tran</copyright>
    <lastBuildDate>Thu, 15 May 2025 00:00:00 +0000</lastBuildDate>
    <generator>Hugo - gohugo.io</generator>
    <docs>http://cyber.harvard.edu/rss/rss.html</docs>
    <atom:link href="//atom.xml" rel="self" type="application/atom+xml"/>
    
    
    <item>
      <title>Why I Still Blog as a Developer in the Age of LLMs: Balancing AI Tools and Human Creativity</title>
      <link>/posts/why-i-still-blog-as-a-developer-in-the-age-of-llms/</link>
      <description>&lt;p&gt;Large Language Models (LLMs) have reshaped content creation across all media, for better and for worse. The ability of these LLMs to generate content at the speed of modern computing raises questions about the authenticity and accuracy of everything on the internet. At least, it did for me.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;How do you define &amp;lsquo;real&amp;rsquo;?&amp;rdquo; &amp;ndash;Morpheus (The Matrix, 2001)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;How do I adapt? As a software developer, is it even worth maintaining this blog when an LLM can churn out any post on any topic in under 30 seconds, regardless of my expertise?&lt;/p&gt;
&lt;p&gt;LLMs are efficient. There&amp;rsquo;s no denying that. As a late adopter, I find myself no longer looking to Google to search a question. Straight to Grok, I go. And when it tells me I asked a great question, I can’t help but feel a little warm and fuzzy inside.&lt;/p&gt;
&lt;h2 id=&#34;pushed-aside&#34;&gt;Pushed aside&lt;/h2&gt;
&lt;p&gt;At the time of the release of LLMs like ChatGPT, I thought it was a neat little tool. But back then, LLMs weren’t running on up-to-date data. I was also skeptical of its accuracy. I pushed LLMs aside after a while and continued my work.&lt;/p&gt;
&lt;p&gt;Other tools emerged, targeting software development with specialized functionality. Do I use these tools to &amp;ldquo;help&amp;rdquo; me code? I was torn. &amp;ldquo;Isn&amp;rsquo;t it cheating?&amp;rdquo;, is what I thought. I pushed these tools away in fear of being called out for &amp;ldquo;cheating&amp;rdquo; by my peers. How dare I use a tool to generate boilerplate code or spot a race condition in a code snippet, right?&lt;/p&gt;
&lt;p&gt;This was a mistake. I should have used all of these tools from the beginning. My recent adoption of LLMs in my daily workflow has made me question the past few years of my career. Had my co-workers been using these tools to finish their tasks and bug fixes quicker thereby having an advantage over non-adopters (me)? Possibly.&lt;/p&gt;
&lt;h2 id=&#34;my-use-case&#34;&gt;My use case&lt;/h2&gt;
&lt;p&gt;Now, I look to the future. I may not use AI to produce mission critical things, but boilerplate code and quick scripts for one-off tasks? Sure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;As long as you understand the code and what it&amp;rsquo;s doing, it&amp;rsquo;s okay.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We&amp;rsquo;ve all heard this line before when software developers ask the question of &amp;ldquo;Should I use&amp;hellip;?&amp;rdquo; even from the StackOverflow days. This is exactly what I&amp;rsquo;m doing but with a twist.&lt;/p&gt;
&lt;p&gt;I assume all code from an LLM is mediocre at best. If my code is mediocre, others’ code is mediocre, your code is mediocre, and LLMs learn from all the mediocre code out there, then the code I get from an LLM is bound to be mediocre too. :)&lt;/p&gt;
&lt;p&gt;I look over the code and get a high level view at what it&amp;rsquo;s doing. If anything feels or looks off, I put it through the wringer and fix it. I often find that LLM-generated code lacks proper encapsulation, so I almost always need to tweak the script for better maintainability. Or maybe I don&amp;rsquo;t tell it to encapsulate? Thoughts for the future&amp;hellip;&lt;/p&gt;
&lt;p&gt;LLMs make it so easy to learn. Gone are the days clicking through links on a Google search result set trying to find an answer. My learning pace has skyrocketed so much with LLMs that I had to subscribe after hitting the free plan’s limits. LLMs have made it easy to connect concepts at a high level while giving me the necessary research topics to dive deeper into.&lt;/p&gt;
&lt;h2 id=&#34;blogging&#34;&gt;Blogging&lt;/h2&gt;
&lt;p&gt;It doesn&amp;rsquo;t stop there for me. The very outline for this blog post was generated by a LLM. I work better when I have something my mind can  spring ideas off of. Do I follow the outline rigidly? Absolutely not. I use it for structure and ideas only.&lt;/p&gt;
&lt;p&gt;Tutorial blog posts used to be really popular and a great learning resource. Are those done now? But if they&amp;rsquo;re done, then what will the LLMs use to learn from? So I guess they&amp;rsquo;re not done but where do we draw the line?&lt;/p&gt;
&lt;p&gt;This blog post could have been written by a LLM in less than a minute. So what&amp;rsquo;s the point? I&amp;rsquo;ve been asking myself this lately. I think I have the answer&amp;hellip;&lt;/p&gt;
&lt;p&gt;The point of it all is the human experience. LLMs can be cold and feel disconnected. As introverted as I am, I still like human connection. I think it&amp;rsquo;s important blog posts have some amount of soul. I type like I talk and talk like I type. I’d be kidding myself if I thought an LLM couldn’t mimic my tone.&lt;/p&gt;
&lt;h2 id=&#34;the-future&#34;&gt;The future&lt;/h2&gt;
&lt;p&gt;So what&amp;rsquo;s the future of this small blog and my little space on the internet? I still don&amp;rsquo;t know.&lt;/p&gt;
&lt;p&gt;I’m not keen on doing tutorial posts anymore. But, they may be a learning experience. That would make it worth it. Perhaps future posts will be more opinionated. That would force me to be a little vulnerable. I&amp;rsquo;m not sure how I feel about that. Maybe I&amp;rsquo;ll cover things like how Apple lost all its mojo in their products, or how Arch Linux and Neovim are the way to live life.&lt;/p&gt;
&lt;p&gt;Regardless, I hope to utilize LLMs as an assistant to blogging and not a crutch! Keep the human experience!&lt;/p&gt;
</description>
      <author>Chris Paraiso</author>
      <guid>/posts/why-i-still-blog-as-a-developer-in-the-age-of-llms/</guid>
      <pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Preserving Quotes in YAML</title>
      <link>/posts/preserving-quotes-in-yaml/</link>
      <description>&lt;p&gt;For a bit of context, I&amp;rsquo;m working on a project that spits out a YAML file that has properties with UUIDs. These UUIDs are linked to different text files and image files. The goal was to have some kind of web component consisting of an SVG with a text overlay. The text was separated out for third-party localization.&lt;/p&gt;
&lt;p&gt;I wrote a Python script and successfully populated the YAML file with what I needed for now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e0def4;background-color:#191724;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;5214484c-42d2-11ee-bb4b-a0cec89b3edd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;graphic&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;subtype&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ebbcba&#34;&gt;media-not-started&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;transcript&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;assets&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f6c177&#34;&gt;52117bbc-42d2-11ee-bb4b-a0cec89b3edd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f6c177&#34;&gt;521285a2-42d2-11ee-bb4b-a0cec89b3edd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f6c177&#34;&gt;5213159e-42d2-11ee-bb4b-a0cec89b3edd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ebbcba&#34;&gt;instructions&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ebbcba&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ebbcba&#34;&gt;svgs&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ebbcba&#34;&gt;text1&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;52117bbc-42d2-11ee-bb4b-a0cec89b3edd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ebbcba&#34;&gt;text2&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;521285a2-42d2-11ee-bb4b-a0cec89b3edd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ebbcba&#34;&gt;text3&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;5213159e-42d2-11ee-bb4b-a0cec89b3edd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ebbcba&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ebbcba&#34;&gt;caption&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;ratio&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;822/861&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;stylesheet&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;5214b930-42d2-11ee-bb4b-a0cec89b3edd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every UUID seen here has a corresponding directory, YAML file and markdown file with the same UUID. For example, the property of &lt;code&gt;text1&lt;/code&gt; would have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e0def4;background-color:#191724;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;52117bbc-42d2-11ee-bb4b-a0cec89b3edd/&lt;/span&gt; &lt;span style=&#34;color:#6e6a86&#34;&gt;#directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;|-- 52117bbc-42d2-11ee-bb4b-a0cec89b3edd.yml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;+-- 52117bbc-42d2-11ee-bb4b-a0cec89b3edd.md&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But there&amp;rsquo;s an issue. If you take a look at the YAML file, some properties are wrapped in double quotes and some are not. All values in the YAML file need to be surrounded by double quotes for my situation.&lt;/p&gt;
&lt;p&gt;Initially, I went with PyYaml&amp;rsquo;s library to assist me in wrangling YAML with Python. Everything was working well up until this point. Diving into the docs I can tell some programmers find documentation hard because it did not help at all. How can I RTFM if the manual is useless? Dive into the source code? I really shouldn&amp;rsquo;t need to do that for something so simple as this. Even, after diving through the source code, it was still unclear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: When writing technical documentation, imagine yourself as &lt;em&gt;&lt;strong&gt;NOT&lt;/strong&gt;&lt;/em&gt; the person who developed it. Also, imagine you&amp;rsquo;re explaining it to your mom. Thanks.&lt;/p&gt;
&lt;p&gt;After a bit of research, I switched to ruamel.yaml&amp;rsquo;s Python library. The API was similar for my needs and the source code was easy to navigate. Refactoring was minimal and it solved my missing double quote issue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e0def4;background-color:#191724;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c4a7e7&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;ruamel.yaml&lt;/span&gt; &lt;span style=&#34;color:#c4a7e7&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;YAML&lt;/span&gt; &lt;span style=&#34;color:#6e6a86&#34;&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c4a7e7&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;ruamel.yaml.scalarstring&lt;/span&gt; &lt;span style=&#34;color:#c4a7e7&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;DoubleQuotedScalarString&lt;/span&gt; &lt;span style=&#34;color:#6e6a86&#34;&gt;# 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;yaml&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;YAML&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;()&lt;/span&gt;                       
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;yaml&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;preserve_quotes&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#31748f&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#6e6a86&#34;&gt;# 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#31748f&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;media_insert_text_field&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;fields&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;List&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;Dict&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;Tuple&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ebbcba&#34;&gt;assets&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ebbcba&#34;&gt;ui&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;{}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#31748f&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;field&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;fields&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6e6a86&#34;&gt;# 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ebbcba&#34;&gt;double_quoted_scalar&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;DoubleQuotedScalarString&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;field&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ebbcba&#34;&gt;assets&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;double_quoted_scalar&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ebbcba&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;text&lt;/span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;field&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;double_quoted_scalar&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#31748f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;assets&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Load ruamel.yaml.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import &lt;code&gt;DoubleQuotedScalarString&lt;/code&gt; to force double quotes on scalar types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;code&gt;preserve_quotes&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Force double quotes on &lt;code&gt;field[&#39;uuid&#39;]&lt;/code&gt; with &lt;code&gt;DoubleQuotedScalarString&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You may be asking yourself why I needed &lt;code&gt;DoubleQuotedScalarString&lt;/code&gt; if &lt;code&gt;preserve_quotes&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt;. I&amp;rsquo;m still asking myself that question. Data was triple checked and followed the same format as the other properties I&amp;rsquo;m injected in the final YAML so I&amp;rsquo;m not sure why. But ruamel.yaml made it easy to force it. That&amp;rsquo;s all that matters to me.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll end by reiterating a tip to write technical documentation like your mom will be reading it. (Not that I&amp;rsquo;m a mother, but you get the gist.)&lt;/p&gt;
</description>
      <author>Chris Paraiso</author>
      <guid>/posts/preserving-quotes-in-yaml/</guid>
      <pubDate>Fri, 25 Aug 2023 09:37:52 +0000</pubDate>
    </item>
    
    <item>
      <title>Fighting with venv in Python</title>
      <link>/posts/fighting-with-venv-in-python/</link>
      <description>&lt;p&gt;I had a brain fart today. I was developing a personal project in Python and I had some library issues that I was trying to wrap my head around. It turns out, I didn&amp;rsquo;t even have my &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;virtual environment&lt;/a&gt; running. I completely forgot.&lt;/p&gt;
&lt;p&gt;So then I activated it.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;source .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then I thought to myself&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t want to type that out every single damn time.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;m lazy. I don&amp;rsquo;t like to type unnecessary things. I switch projects mid-day on multiple occasions at work so there&amp;rsquo;s a bit of a context switch to deal with. If I have to write automation scripts and aliases now to prevent me from typing even the smallest of words, I&amp;rsquo;ll take the time to try to solve that.&lt;/p&gt;
&lt;h2 id=&#34;context-issues&#34;&gt;Context issues&lt;/h2&gt;
&lt;p&gt;So I did just that. I set aside some time to try to automate things.&lt;/p&gt;
&lt;p&gt;I wanted a command I could execute (&lt;code&gt;venv&lt;/code&gt;). This command would run a script that creates a virtual environment via &lt;code&gt;python3 -m venv .venv&lt;/code&gt;. Then it would run &lt;code&gt;source .venv/bin/activate&lt;/code&gt; to start the virtual environment.&lt;/p&gt;
&lt;p&gt;Well, every time I ran this script, the directory would be created at the current working directory and the &lt;code&gt;source&lt;/code&gt; line ran without error but the virtual environment did not start. The Python interpreter my environment was running was still global at &lt;code&gt;/usr/local/bin/python3&lt;/code&gt;. So something is amiss!&lt;/p&gt;
&lt;p&gt;After doing a bit of research it turns out that when you want to enter a virtual environment, the virtual environment modifies my shell&amp;rsquo;s variables. An example of this would be modifying my shell&amp;rsquo;s variables to point to the correct Python interpreter.&lt;/p&gt;
&lt;p&gt;Also, when you run a Bash script, it executes in a different context/subshell. The file and directory changes stuck after the script ran, but the necessary variables I needed for my virtual environment were thrown away as soon as the script finished running.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;I removed the &lt;code&gt;source&lt;/code&gt; line from my &lt;code&gt;venv.sh&lt;/code&gt; script and just left the script to create the needed files and directories. I would then need to run that &lt;code&gt;source&lt;/code&gt; command to enter the virtual environment.&lt;/p&gt;
&lt;p&gt;Then I thought: Why don&amp;rsquo;t I just string the commands together into one alias on my shell? Perfect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e0def4;background-color:#191724;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6e6a86&#34;&gt;# aliases.sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#ebbcba&#34;&gt;venv&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#39;$HOME/src/dotfiles/bin/utils/venv.sh &amp;amp;&amp;amp; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;    source .venv/bin/activate&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6e6a86&#34;&gt;# ... other aliases below here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the &lt;code&gt;venv&lt;/code&gt; alias would execute the &lt;code&gt;venv.sh&lt;/code&gt; &lt;strong&gt;then&lt;/strong&gt; run the &lt;code&gt;source&lt;/code&gt; command in the context of the shell I am currently in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e0def4;background-color:#191724;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6e6a86&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6e6a86&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6e6a86&#34;&gt;# venv.sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6e6a86&#34;&gt;# create venv if not exists&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#31748f&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;[&lt;/span&gt; -d &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;.venv&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#31748f&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ebbcba&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;Found .venv. Activating...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#31748f&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ebbcba&#34;&gt;read&lt;/span&gt; -p &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;.venv does not exist. Would you like to \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;         create a venv for this directory? (y/n) &amp;#34;&lt;/span&gt; response
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#31748f&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;$response&lt;/span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#908caa&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#908caa&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#31748f&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ebbcba&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;Creating .venv directory @ &lt;/span&gt;&lt;span style=&#34;color:#ebbcba&#34;&gt;$PWD&lt;/span&gt;&lt;span style=&#34;color:#f6c177&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      python3 -m venv .venv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#31748f&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#31748f&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If &lt;code&gt;venv.sh&lt;/code&gt; finds an existing &lt;code&gt;.venv&lt;/code&gt; directory, it does nothing. If the script does not find the &lt;code&gt;.venv&lt;/code&gt; directory it prompts the user asking if the script has permission to create it. I know I could probably do without the prompt and just have the script create it. I decided to leave it in for now.&lt;/p&gt;
&lt;p&gt;I guess my issue was with Bash and not venv. Anyway, I think I have to be careful. I&amp;rsquo;ve been getting sidetracked and spending a lot of time configuring my environment. Off to building something!&lt;/p&gt;
</description>
      <author>Chris Paraiso</author>
      <guid>/posts/fighting-with-venv-in-python/</guid>
      <pubDate>Wed, 23 Aug 2023 09:36:29 +0000</pubDate>
    </item>
    
  </channel>
</rss>
